#ifndef MAPS_PARSER_H
#define MAPS_PARSER_H

#include <tinyxml2.h>

#include <map>
#include <string>

#include "Maps/GameMap.h"
#include "Maps/TitleLayer.h"
#include "Maps/Tileset.h"

/**
 * Map Parser
 *
 * A parser for maps generated by the "Tiled" editor
 *
 * @see https://www.mapeditor.org/
 *
 * @author Alin Eugen Deac <aedart@gmail.com>
 */
class Parser
{
    public:
        /**
         * Prevent copy constructor
         */
        Parser(const Parser&) = delete;

        /**
         * Prevent assignment
         *
         * @return
         */
        Parser& operator=(const Parser&) = delete;

        /**
         * Get singleton instance of this map parser
         *
         * @return
         */
        static Parser& getInstance();

        /**
         * Destroy the map parser instance
         */
        static void destroy();

        /**
         * Destructor
         */
        virtual ~Parser();

        /**
         * Load a map from a source file
         *
         * @param id The ID of the map
         * @param source The source file of the map
         *
         * @return
         */
        bool load(const std::string& id, const std::string& source);

        /**
         * Determine if a game map exists for given ID
         *
         * @param id The ID of the loaded map
         *
         * @return
         */
        [[nodiscard]] bool has(const std::string& id) const;

        /**
         * Get game map that matches given ID
         *
         * @param id The ID of the loaded map
         *
         * @return Pointer to matching Game Map instance
         */
        GameMap* get(const std::string& id);

        /**
         * Removes loaded maps from memory
         */
        void clean();

    protected:

        /**
         * A map of the loaded game maps
         */
        std::map<std::string, GameMap*> maps;

        /**
         * Default constructor
         */
        Parser();

        /**
         * Parse map
         *
         * @param id The ID of the map
         * @param source The source file of the map
         *
         * @return
         */
        bool parse(const std::string& id, const std::string& source);

        /**
         * Parse XML Element into a tileset
         *
         * @param element Tileset xml element
         *
         * @return A new tileset instance
         */
        Tileset* parseTileset(const tinyxml2::XMLElement* element);

        /**
         * Parse XML Element into a tile layer
         *
         * @param element Map layer xml element
         * @param tilesets The tileset list
         * @param tileWidth Width of tiles in pixels
         * @param tileHeight Height of tiles in pixels
         * @param rows Amount of rows
         * @param columns Amount of columns
         *
         * @return A pointer to a new tile layer instance
         */
        TitleLayer* parseTitleLayer(
            const tinyxml2::XMLElement* element,
            const TilesetList& tilesets,
            int tileWidth,
            int tileHeight,
            int rows,
            int columns
        );

    private:
        /**
         * Singleton instance
         */
        inline static Parser* instance = nullptr;
};

#endif  // MAPS_PARSER_H
